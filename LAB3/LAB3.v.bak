module LAB3 (KEY, SW, LEDR, HEX3, HEX2, HEX1, HEX0);
	input [3:0] KEY;
	input [9:0] SW;
	output [9] LEDR;
	output [6:0] HEX3, HEX2, HEX1, HEX0;
	reg [7:0] A, B, C, D;
	reg [15:0] resultAB, resultCD, sum;
	
	mult AB(.dataa(A), .datab(B), .result(resultAB));
	mult CD(.dataa(C), .datab(D), .result(resultCD));
	add_sub ABCD(.add_sub(1'b1), .dataa(resultAB), .datab(resultCD), .cout(LEDR), .result(sum));
	
	always @(posedge KEY[1] or negedge KEY[0]) begin
		if(!KEY[0]) begin
			A = 0;
			B = 0;
			C = 0;
			D = 0;
			sum = 0;
		end
		else begin
			if(SW[9] == 1) begin
				if(SW[8] == 1) begin
					if(KEY[2] == 1) begin
						A = SW[7:0];
						two_digit_seg displayA(A, HEX3, HEX2);
					end
					else begin
						B = SW[7:0];
						two_digit_seg displayB(B, HEX1, HEX0);
					end
				else begin
					if(KEY[2] == 1) begin
						C = SW[7:0];
						two_digit_seg displayC(C, HEX3, HEX2);
					end
					else begin
						D = SW[7:0];
						two_digit_seg displayD(D, HEX1, HEX0);
					end
		end
		if(KEY[3] == 1) begin
			two_digit_seg de1(sum[15:8], HEX3, HEX2);
			two_digit_seg de0(sum[7:0], HEX1, HEX0);
		end
	end
endmodule

//bcd to seg
module seg_decoder (bcd, seg);
	input [7:0] bcd;
	output [6:0] seg;
	reg [6:0] seg;
	
	always @(bcd) begin
		case (bcd)
			0 : seg = 7'b1000000;
			1 : seg = 7'b1111001;
			2 : seg = 7'b0100100;
			3 : seg = 7'b0110000;
			4 : seg = 7'b0011001;
			5 : seg = 7'b0010010;
			6 : seg = 7'b0000010;
			7 : seg = 7'b1111000;
			8 : seg = 7'b0000000;
			9 : seg = 7'b0010000;
			10 : seg = 7'b0001000;
			11 : seg = 7'b0000011;
			12 : seg = 7'b1000110;
			13 : seg = 7'b0100001;
			14 : seg = 7'b0000110;
			15 : seg = 7'b0001110;
			//lights out
			default : seg = 7'b1111111;
		endcase
	end
endmodule

//display two digit in seg
module two_digit_seg (bcd, seg1, seg0);
	input [7:0] bcd;
	output [6:0] seg1, seg0;
	
	seg_decoder de1(bcd/4'd10, seg1);
	seg_decoder de0(bcd%4'd10, seg0);
endmodule
